#include <bits/stdc++.h>
#include <gtsam/geometry/Pose2.h>
#include <gtsam/geometry/Point2.h>
#include <gtsam/nonlinear/NonlinearFactorGraph.h>
#include <gtsam/slam/BetweenFactor.h>
#include <gtsam/slam/BearingRangeFactor.h>
#include <gtsam/geometry/Rot2.h>
#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>

using namespace gtsam;
using namespace std;

vector<vector<float>> odometries = {{0.110013, 0.0, 0.0, 0.110013, 0.0, 0.0}, {0.11412, 0.0, 0.0, 0.224132, 0.0, 0.0}, {0.110095, -0.0, 0.0, 0.334227, 0.0, 0.0}, {0.11629, 0.0, 0.0, 0.450517, 0.0, 0.0}, {0.113975, 0.0, 0.0, 0.564492, 0.0, 0.0}, {0.122857, -0.0, 0.0, 0.687349, 0.0, 0.0}, {0.121376, -0.0, 0.0, 0.808725, 0.0, 0.0}, {0.120252, -0.0, 0.0, 0.928977, 0.0, 0.0}, {0.121082, -0.0, 0.0, 1.050059, 0.0, 0.0}, {0.122389, -4e-05, -0.004825, 1.172448, -4e-05, -0.004825}, {0.121088, -0.00099, -0.026377, 1.29353, -0.001614, -0.031201}, {0.100237, -0.001649, -0.044139, 1.393667, -0.00639, -0.07534}, {0.102568, -0.00177, -0.045178, 1.495811, -0.015874, -0.120518}, {0.110893, -0.0, 0.0, 1.6059, -0.029207, -0.120518}, {0.114631, 0.0, 0.0, 1.719699, -0.042988, -0.120518}, {0.12128, 0.0, 0.0, 1.840099, -0.057569, -0.120518}, {0.122488, -0.0, 0.0, 1.961698, -0.072296, -0.120518}, {0.109204, 0.0, 0.0, 2.07011, -0.085425, -0.120518}, {0.109589, 0.000468, 0.017155, 2.17896, -0.098136, -0.103363}, {0.100894, 0.003129, 0.095878, 2.279638, -0.105434, -0.007485}, {0.121988, 0.006523, 0.133564, 2.401672, -0.099824, 0.126078}, {0.121518, 0.006472, 0.133047, 2.521412, -0.078122, 0.259125}, {0.124239, 0.007564, 0.165304, 2.639565, -0.038977, 0.424429}, {0.120617, 0.008807, 0.182223, 2.745854, 0.018719, 0.606652}, {0.123622, 0.009247, 0.1868, 2.842144, 0.096795, 0.793452}, {0.123536, 0.009239, 0.186665, 2.922206, 0.191329, 0.980117}, {0.100871, 0.005762, 0.152169, 2.973597, 0.278317, 1.132286}, {0.102485, 0.005948, 0.154127, 3.011726, 0.373631, 1.286414}, {0.102536, 0.005953, 0.154692, 3.03478, 0.473719, 1.441105}, {0.104104, 0.006139, 0.157074, 3.042156, 0.577742, 1.598179}, {0.10613, 0.006381, 0.160147, 3.032872, 0.683658, 1.758326}, {0.1051, 0.006244, 0.157554, 3.007143, 0.785751, 1.915881}, {0.107439, 0.00654, 0.162134, 2.964645, 0.884644, 2.078014}, {0.108783, 0.006702, 0.164171, 2.905945, 0.976476, 2.242185}, {0.106771, 0.006459, 0.161119, 2.834469, 1.056055, 2.403305}, {0.110336, 0.0069, 0.166533, 2.748218, 1.125211, 2.569838}, {0.108824, 0.00671, 0.164234, 2.653072, 1.178453, 2.734071}, {0.109266, 0.006766, 0.164908, 2.550072, 1.215547, 2.898979}, {0.110815, 0.006955, 0.167259, 2.440831, 1.235418, 3.066238}, {0.110674, 0.006941, 0.167045, 2.329949, 1.236828, -3.049903}, {0.1134, 0.007288, 0.171191, 2.217692, 1.219188, -2.878712}, {0.113103, 0.00725, 0.17073, 2.110358, 1.182796, -2.707983}, {0.115763, 0.007592, 0.174783, 2.008499, 1.127269, -2.5332}, {0.114235, 0.007397, 0.172453, 1.91899, 1.055908, -2.360746}, {0.114956, 0.007491, 0.173549, 1.842607, 0.969672, -2.187198}, {0.116831, 0.007738, 0.176404, 1.781381, 0.869868, -2.010794}, {0.120169, 0.008189, 0.181472, 1.737606, 0.757657, -1.829322}, {0.115263, 0.007526, 0.174008, 1.715414, 0.644301, -1.655314}, {0.118537, 0.007961, 0.178998, 1.71334, 0.525514, -1.476315}, {0.121733, 0.00838, 0.183855, 1.733167, 0.405115, -1.29246}, {0.121483, 0.008367, 0.183479, 1.774591, 0.290606, -1.10898}, {0.123697, 0.008681, 0.186846, 1.837479, 0.183735, -0.922135}, {0.124695, 0.008822, 0.188366, 1.91984, 0.089696, -0.733769}, {0.126036, 0.009014, 0.190404, 2.019478, 0.011987, -0.543364}, {0.125151, 0.008888, 0.189058, 2.131199, -0.04511, -0.354306}, {0.125468, 0.008933, 0.189541, 2.251972, -0.080262, -0.164765}, {0.12689, 0.009135, 0.191699, 2.378642, -0.092063, 0.026935}, {0.125672, 0.008955, 0.18984, 2.504028, -0.079727, 0.216774}, {0.12575, 0.009091, 0.192482, 2.62488, -0.043802, 0.409256}, {0.12646, 0.009196, 0.193578, 2.737237, 0.014956, 0.602834}, {0.127417, 0.009276, 0.194418, 2.836936, 0.09484, 0.797252}, {0.126099, 0.009143, 0.193025, 2.918497, 0.191444, 0.990277}, {0.128052, 0.00943, 0.196041, 2.980843, 0.30369, 1.186317}, {0.128665, 0.009521, 0.196984, 3.020276, 0.426533, 1.383301}, {0.127659, 0.009371, 0.194775, 3.034864, 0.553701, 1.578076}, {0.128381, 0.009426, 0.195902, 3.024503, 0.68201, 1.773978}, {0.128101, 0.009438, 0.196115, 2.989411, 0.805572, 1.970093}, {0.127761, 0.009366, 0.186346, 2.931112, 0.919641, 2.156439}, {0.102154, -0.0, 0.0, 2.874648, 1.004773, 2.156439}, {0.106108, -0.0, 0.0, 2.815999, 1.093199, 2.156439}, {0.113154, 0.0, 0.0, 2.753454, 1.187497, 2.156439}, {0.112753, -0.0, 0.0, 2.691132, 1.28146, 2.156439}, {0.105328, -0.0, 0.0, 2.632914, 1.369236, 2.156439}, {0.119542, -0.0, 0.0, 2.566839, 1.468857, 2.156439}, {0.100713, -0.0, 0.0, 2.511171, 1.552787, 2.156439}};


vector<vector<float>> landmarks = {{0, 0, -0.394137, 1.741411}, {0, 1, 0.293011, 2.25192}, {0, 2, 0.843128, 1.719482}, {1, 0, -0.420301, 1.642216}, {1, 1, 0.304061, 2.16363}, {1, 2, 0.888095, 1.643725}, {2, 0, -0.451931, 1.54794}, {2, 1, 0.318439, 2.047842}, {2, 2, 0.942169, 1.577601}, {3, 0, -0.492043, 1.435268}, {3, 1, 0.337746, 1.930055}, {3, 3, 0.839837, 2.682264}, {3, 2, 1.005101, 1.512845}, {4, 0, -0.522088, 1.362649}, {4, 1, 0.350341, 1.848017}, {4, 3, 0.861693, 2.622516}, {4, 2, 1.049947, 1.466645}, {5, 0, -0.573221, 1.253189}, {5, 1, 0.373729, 1.717742}, {5, 3, 0.898406, 2.537277}, {5, 2, 1.127783, 1.424698}, {6, 0, -0.635684, 1.148037}, {6, 1, 0.400516, 1.608686}, {6, 3, 0.937249, 2.461321}, {6, 2, 1.210659, 1.368314}, {7, 0, -0.701363, 1.05416}, {7, 4, -0.579438, 2.689959}, {7, 1, 0.430238, 1.481311}, {7, 3, 0.97891, 2.368509}, {7, 2, 1.293828, 1.332573}, {8, 0, -0.774065, 0.975538}, {8, 4, -0.600708, 2.578633}, {8, 5, -0.194274, 2.64869}, {8, 1, 0.460118, 1.390629}, {8, 3, 1.016664, 2.321338}, {8, 2, 1.372054, 1.302774}, {9, 0, -0.877086, 0.886282}, {9, 4, -0.633243, 2.478549}, {9, 5, -0.209349, 2.535504}, {9, 1, 0.503059, 1.279754}, {9, 3, 1.062086, 2.250392}, {9, 2, 1.469448, 1.284738}, {10, 0, -0.975725, 0.826132}, {10, 4, -0.657506, 2.384185}, {10, 5, -0.215118, 2.413084}, {10, 1, 0.55113, 1.188093}, {10, 3, 1.108096, 2.191451}, {10, 2, 1.55515, 1.277672}, {11, 0, -1.061254, 0.774836}, {11, 4, -0.665806, 2.3213}, {11, 5, -0.204974, 2.310252}, {11, 1, 0.617265, 1.094892}, {11, 3, 1.166531, 2.147448}, {11, 2, 1.650707, 1.283427}, {12, 0, -1.141126, 0.725905}, {12, 4, -0.65839, 2.224828}, {12, 5, -0.180186, 2.215568}, {12, 1, 0.703239, 1.024583}, {12, 3, 1.243835, 2.133682}, {12, 2, 1.759726, 1.284191}, {13, 0, -1.279545, 0.684245}, {13, 4, -0.661499, 2.124438}, {13, 5, -0.156426, 2.089399}, {13, 1, 0.829625, 0.931342}, {13, 3, 1.337179, 2.090542}, {13, 2, 1.888283, 1.316424}, {14, 0, -1.381258, 0.670432}, {14, 4, -0.681164, 2.077078}, {14, 5, -0.160928, 2.018386}, {14, 1, 0.887127, 0.878845}, {14, 3, 1.372988, 2.073914}, {14, 2, 1.936205, 1.329731}, {15, 0, -1.620764, 0.65509}, {15, 4, -0.730451, 1.941703}, {15, 5, -0.172462, 1.844787}, {15, 1, 1.043845, 0.792282}, {15, 3, 1.450089, 2.053397}, {15, 2, 2.043153, 1.385368}, {16, 0, -1.755578, 0.663914}, {16, 4, -0.763403, 1.883579}, {16, 5, -0.18018, 1.767469}, {16, 1, 1.146777, 0.755162}, {16, 3, 1.493921, 2.051172}, {16, 2, 2.097825, 1.428512}, {17, 0, -1.912863, 0.668439}, {17, 4, -0.809353, 1.784873}, {17, 5, -0.19288, 1.642015}, {17, 6, 0.44728, 2.618915}, {17, 1, 1.300995, 0.716983}, {18, 0, -2.067459, 0.726925}, {18, 4, -0.856048, 1.713161}, {18, 5, -0.209047, 1.542175}, {18, 6, 0.462112, 2.521556}, {18, 1, 1.440729, 0.695884}, {19, 4, -0.931319, 1.649612}, {19, 5, -0.255281, 1.44182}, {19, 6, 0.446168, 2.429153}, {19, 1, 1.545344, 0.685857}, {20, 4, -1.123828, 1.582757}, {20, 5, -0.415487, 1.330496}, {20, 6, 0.333943, 2.309831}, {20, 7, 0.774929, 2.572277}, {20, 3, 1.538489, 2.047243}, {20, 1, 1.579237, 0.68122}, {21, 4, -1.327983, 1.539136}, {21, 5, -0.59099, 1.230971}, {21, 6, 0.213831, 2.205641}, {21, 7, 0.671674, 2.487381}, {21, 3, 1.464854, 2.037768}, {21, 1, 1.614184, 0.690734}, {21, 2, 2.079354, 1.797462}, {22, 4, -1.567766, 1.531919}, {22, 5, -0.815252, 1.13393}, {22, 6, 0.069207, 2.0667}, {22, 7, 0.550496, 2.371433}, {22, 3, 1.37546, 2.01622}, {22, 1, 1.645646, 0.697935}, {22, 2, 1.990731, 1.842824}, {23, 4, -1.781193, 1.541374}, {23, 5, -1.040156, 1.072431}, {23, 6, -0.077041, 1.958807}, {23, 7, 0.422594, 2.261894}, {23, 3, 1.276563, 1.992769}, {23, 1, 1.641118, 0.70785}, {24, 4, -2.017504, 1.586118}, {24, 5, -1.307164, 1.024906}, {24, 6, -0.255094, 1.84265}, {24, 7, 0.272976, 2.169412}, {24, 3, 1.164052, 1.954481}, {24, 1, 1.629042, 0.712509}, {25, 5, -1.624381, 1.011816}, {25, 6, -0.472783, 1.723927}, {25, 7, 0.09161, 2.043986}, {25, 3, 1.031758, 1.890488}, {25, 1, 1.610798, 0.710884}, {26, 5, -1.764106, 1.01764}, {26, 6, -0.575075, 1.66248}, {26, 7, 0.006653, 1.980714}, {26, 3, 0.970679, 1.856669}, {26, 2, 1.599276, 1.929558}, {26, 1, 1.60252, 0.72719}, {27, 5, -2.022603, 1.043519}, {27, 6, -0.77611, 1.593308}, {27, 7, -0.15667, 1.867466}, {27, 3, 0.857987, 1.785028}, {27, 2, 1.497173, 1.943704}, {27, 1, 1.588374, 0.720203}, {28, 6, -0.991151, 1.520823}, {28, 7, -0.331663, 1.758029}, {28, 3, 0.740086, 1.704505}, {28, 2, 1.391671, 1.926063}, {28, 1, 1.571706, 0.726707}, {29, 6, -1.166382, 1.489663}, {29, 7, -0.478114, 1.674564}, {29, 3, 0.644665, 1.639573}, {29, 2, 1.305221, 1.902611}, {29, 1, 1.55632, 0.729238}, {30, 6, -1.401246, 1.456893}, {30, 7, -0.67803, 1.589879}, {30, 3, 0.518307, 1.551334}, {30, 2, 1.196456, 1.871596}, {30, 1, 1.538008, 0.725135}, {31, 6, -1.583334, 1.441298}, {31, 7, -0.836874, 1.529138}, {31, 3, 0.41911, 1.474636}, {31, 2, 1.114636, 1.837177}, {31, 1, 1.530864, 0.726664}, {32, 6, -1.823719, 1.458548}, {32, 7, -1.064379, 1.462092}, {32, 3, 0.281216, 1.36944}, {32, 2, 1.002983, 1.771082}, {32, 1, 1.51513, 0.721027}, {32, 0, 2.133206, 1.967489}, {33, 6, -2.013429, 1.482683}, {33, 7, -1.252564, 1.433084}, {33, 3, 0.161437, 1.278828}, {33, 2, 0.910332, 1.720782}, {33, 1, 1.499943, 0.717926}, {33, 0, 2.038338, 2.001999}, {34, 7, -1.495267, 1.401}, {34, 3, 0.003362, 1.163388}, {34, 2, 0.794084, 1.639277}, {34, 1, 1.487921, 0.705749}, {34, 0, 1.923777, 2.051682}, {35, 7, -1.71453, 1.411142}, {35, 3, -0.152409, 1.067188}, {35, 2, 0.688792, 1.564919}, {35, 1, 1.478471, 0.701395}, {35, 0, 1.821206, 2.089341}, {36, 7, -1.931872, 1.431116}, {36, 3, -0.325173, 0.9656}, {36, 2, 0.575552, 1.492193}, {36, 1, 1.471487, 0.695206}, {37, 7, -2.120517, 1.478502}, {37, 3, -0.492662, 0.888555}, {37, 2, 0.474934, 1.417467}, {37, 1, 1.462449, 0.683521}, {38, 3, -0.710804, 0.811531}, {38, 2, 0.349576, 1.316765}, {38, 1, 1.453771, 0.669346}, {39, 3, -0.928026, 0.756557}, {39, 2, 0.238543, 1.229248}, {39, 0, 1.431786, 2.104692}, {39, 1, 1.450683, 0.660615}, {40, 3, -1.244505, 0.700827}, {40, 2, 0.079367, 1.103173}, {40, 0, 1.314417, 2.088475}, {40, 1, 1.452744, 0.651054}, {41, 3, -1.54958, 0.682425}, {41, 2, -0.079034, 1.000783}, {41, 0, 1.203182, 2.063888}, {41, 1, 1.45352, 0.637617}, {41, 5, 2.116021, 2.231377}, {42, 3, -1.855404, 0.682562}, {42, 2, -0.252481, 0.902138}, {42, 0, 1.093468, 2.008621}, {42, 1, 1.456313, 0.631049}, {42, 5, 1.999654, 2.287973}, {43, 2, -0.421532, 0.815783}, {43, 0, 0.995713, 1.961638}, {43, 1, 1.463387, 0.618154}, {43, 5, 1.900391, 2.324656}, {44, 2, -0.716043, 0.716444}, {44, 0, 0.853489, 1.879766}, {44, 1, 1.480644, 0.608112}, {45, 2, -0.915629, 0.668724}, {45, 0, 0.769245, 1.818095}, {45, 1, 1.491669, 0.597767}, {46, 2, -1.267702, 0.608694}, {46, 0, 0.628269, 1.720115}, {46, 5, 1.544214, 2.368962}, {46, 1, 1.504786, 0.591831}, {47, 2, -1.692654, 0.59315}, {47, 0, 0.470317, 1.612978}, {47, 5, 1.400961, 2.349992}, {47, 1, 1.534091, 0.587601}, {48, 2, -1.888697, 0.591127}, {48, 0, 0.388294, 1.553109}, {48, 5, 1.329425, 2.335169}, {48, 1, 1.541749, 0.58151}, {49, 0, 0.192609, 1.404545}, {49, 8, 0.757681, 2.632363}, {49, 5, 1.167316, 2.294171}, {49, 1, 1.574485, 0.580381}, {50, 0, 0.095426, 1.339704}, {50, 8, 0.672491, 2.574081}, {50, 5, 1.092084, 2.254354}, {50, 1, 1.589162, 0.579784}, {51, 0, -0.093621, 1.201784}, {51, 8, 0.509209, 2.457036}, {51, 5, 0.949805, 2.191133}, {51, 1, 1.608943, 0.585598}, {52, 0, -0.305935, 1.072776}, {52, 8, 0.341958, 2.336873}, {52, 5, 0.806152, 2.099686}, {52, 1, 1.636404, 0.592985}, {53, 0, -0.550808, 0.957188}, {53, 8, 0.161769, 2.211478}, {53, 5, 0.655506, 2.011691}, {53, 1, 1.652091, 0.605073}, {54, 0, -0.763412, 0.886238}, {54, 8, 0.018865, 2.117258}, {54, 5, 0.535012, 1.926039}, {54, 1, 1.664385, 0.613359}, {55, 0, -1.071529, 0.805252}, {55, 8, -0.178847, 1.984366}, {55, 5, 0.374601, 1.795156}, {55, 1, 1.678415, 0.626475}, {55, 3, 2.112212, 1.899863}, {56, 0, -1.345969, 0.768983}, {56, 8, -0.346167, 1.884971}, {56, 5, 0.237063, 1.687434}, {56, 7, 0.886068, 2.62408}, {56, 1, 1.675004, 0.633892}, {57, 0, -1.630191, 0.761621}, {57, 8, -0.521969, 1.793985}, {57, 5, 0.092487, 1.600789}, {57, 7, 0.760279, 2.547812}, {57, 1, 1.674196, 0.64833}, {58, 0, -1.909025, 0.776676}, {58, 8, -0.703724, 1.706989}, {58, 5, -0.05185, 1.498581}, {58, 7, 0.638026, 2.46418}, {58, 1, 1.678244, 0.660693}, {59, 8, -0.985873, 1.607866}, {59, 5, -0.289148, 1.362393}, {59, 7, 0.451176, 2.339359}, {59, 9, 0.8901, 2.582709}, {59, 3, 1.6523, 2.03716}, {59, 1, 1.673056, 0.67343}, {60, 8, -1.227117, 1.553951}, {60, 5, -0.497931, 1.255693}, {60, 7, 0.294434, 2.236172}, {60, 9, 0.746954, 2.501415}, {60, 3, 1.532626, 2.043538}, {60, 1, 1.658277, 0.682742}, {61, 8, -1.474813, 1.524522}, {61, 5, -0.727442, 1.163131}, {61, 7, 0.131366, 2.106553}, {61, 9, 0.604583, 2.405519}, {61, 3, 1.416122, 2.028876}, {61, 1, 1.648885, 0.697254}, {61, 2, 2.029731, 1.839015}, {62, 8, -1.667611, 1.535353}, {62, 5, -0.916909, 1.099941}, {62, 7, 0.002685, 2.030151}, {62, 9, 0.491875, 2.314431}, {62, 3, 1.327814, 2.001775}, {62, 1, 1.637022, 0.698919}, {63, 8, -1.979318, 1.573328}, {63, 5, -1.257588, 1.0327}, {63, 7, -0.226479, 1.863174}, {63, 9, 0.295694, 2.18702}, {63, 3, 1.180437, 1.962299}, {63, 1, 1.628325, 0.713333}, {64, 5, -1.516216, 1.00921}, {64, 7, -0.399384, 1.781867}, {64, 9, 0.150599, 2.091018}, {64, 3, 1.070206, 1.912867}, {64, 1, 1.608825, 0.716797}, {65, 5, -1.802318, 1.019012}, {65, 7, -0.605781, 1.657216}, {65, 9, -0.019408, 1.969389}, {65, 3, 0.94986, 1.858327}, {65, 2, 1.579672, 1.940477}, {65, 1, 1.592598, 0.722412}, {66, 5, -2.052785, 1.04948}, {66, 7, -0.8039, 1.586788}, {66, 9, -0.181296, 1.858946}, {66, 3, 0.835836, 1.78381}, {66, 2, 1.475015, 1.931603}, {66, 1, 1.574568, 0.726603}, {67, 7, -1.072491, 1.51062}, {67, 9, -0.402628, 1.728283}, {67, 3, 0.686834, 1.682413}, {67, 2, 1.341183, 1.921236}, {67, 1, 1.550741, 0.729788}, {68, 7, -1.305841, 1.467328}, {68, 9, -0.592774, 1.629238}, {68, 3, 0.584872, 1.578964}, {68, 2, 1.259284, 1.882551}, {68, 1, 1.569446, 0.721344}, {69, 7, -1.391547, 1.437727}, {69, 9, -0.641629, 1.527216}, {69, 3, 0.615745, 1.489581}, {69, 2, 1.307191, 1.849184}, {69, 1, 1.712296, 0.731319}, {70, 7, -1.448785, 1.423462}, {70, 9, -0.679128, 1.471726}, {70, 3, 0.639367, 1.431802}, {70, 2, 1.33997, 1.828503}, {70, 1, 1.814959, 0.756498}, {71, 7, -1.549727, 1.410465}, {71, 9, -0.748279, 1.371936}, {71, 3, 0.6878, 1.325007}, {71, 2, 1.403485, 1.799991}, {71, 1, 1.963881, 0.762835}, {72, 7, -1.637641, 1.421157}, {72, 9, -0.816377, 1.289884}, {72, 3, 0.741119, 1.236614}, {72, 2, 1.45949, 1.787547}, {72, 1, 2.046072, 0.778137}, {73, 7, -1.719384, 1.41686}, {73, 9, -0.886811, 1.209358}, {73, 3, 0.802639, 1.153234}, {73, 2, 1.518496, 1.773996}, {74, 7, -1.800398, 1.444048}, {74, 9, -0.967998, 1.150256}, {74, 3, 0.866247, 1.075943}, {74, 2, 1.573895, 1.772602}};
int num_landmarks = 9;


int main() {
    // Create an empty nonlinear factor graph
    NonlinearFactorGraph graph;

    vector<Symbol> xs;
    vector<Symbol> ls;
    for (size_t i = 0; i <= num_landmarks; i++) {
        ls.push_back(Symbol('l', i+1));
    }
    for (size_t i = 0; i < odometries.size() + 1; i++) {
        xs.push_back(Symbol('x', i+1));
    }

    // Add a Gaussian prior on pose x_1
    Pose2 priorMean(0.0, 0.0, 0.0);
    noiseModel::Diagonal::shared_ptr priorNoise =
    noiseModel::Diagonal::Sigmas(Vector3(0.3, 0.3, 0.1));
    graph.add(PriorFactor<Pose2>(xs[0], priorMean, priorNoise));

    // Add two odometry factors
    noiseModel::Diagonal::shared_ptr odometryNoise =
    noiseModel::Diagonal::Sigmas(Vector3(0.2, 0.2, 0.1));
    for (size_t i = 0; i < odometries.size(); i++) {
        graph.add(gtsam::BetweenFactor<Pose2>(xs[i], xs[i+1], Pose2(odometries[i][0], odometries[i][1], odometries[i][2]), odometryNoise));
    }

    noiseModel::Diagonal::shared_ptr brNoise = noiseModel::Diagonal::Sigmas(Vector2(0.1, 0.2));
    for (size_t i = 0; i < landmarks.size(); i++) {
        graph.add(gtsam::BearingRangeFactor<Pose2, Point2>(xs[round(landmarks[i][0])], ls[round(landmarks[i][1])], Rot2::fromAngle(landmarks[i][2]), landmarks[i][3], brNoise));
    }

    Values initial_estimates;

    vector<Pose2> initial_pos_estimates;
    Pose2 pos(0, 0, 0);
    initial_pos_estimates.push_back(pos);
    for (size_t i = 0; i < odometries.size(); i++) {
        initial_pos_estimates.push_back(Pose2(odometries[i][3], odometries[i][4], odometries[i][5]));
    }  

    // cout << "before" << endl;

    unordered_set<int> visited;
    for (size_t i = 0; i < landmarks.size(); i++) {
        int pos_idx = round(landmarks[i][0]);
        int ld_idx = round(landmarks[i][1]);
        cout << "l" << ld_idx + 1 << " x" << pos_idx + 1 << endl;
        if (visited.count(ld_idx))
            continue;
        visited.insert(ld_idx);
        
        float r = landmarks[i][3];
        float theta = landmarks[i][2];
        initial_estimates.insert(ls[ld_idx], initial_pos_estimates[pos_idx] * Point2(r*cos(theta), r*sin(theta)));
        cout << "l" << ld_idx + 1 << " x" << pos_idx + 1 << endl;
    }

    // cout << "after" << endl;

    for (size_t i = 0; i < initial_pos_estimates.size(); i++) {
        initial_estimates.insert(xs[i], initial_pos_estimates[i]);
    }

    LevenbergMarquardtOptimizer optimzer(graph, initial_estimates);
    Values result = optimzer.optimize();
    result.print("\nFinal result\n");

}