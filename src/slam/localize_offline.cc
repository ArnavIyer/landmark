#include <bits/stdc++.h>
#include <gtsam/geometry/Pose2.h>
#include <gtsam/geometry/Point2.h>
#include <gtsam/nonlinear/NonlinearFactorGraph.h>
#include <gtsam/slam/BetweenFactor.h>
#include <gtsam/slam/BearingRangeFactor.h>
#include <gtsam/geometry/Rot2.h>
#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
#include <gtsam/nonlinear/NonlinearEquality.h>

using namespace gtsam;
using namespace std;
// namespace eq2D = simulated2D::equality_constraints;
vector<vector<float>> odometries = {{0.122704, -1e-06, 0.0, 0.122704, -1e-06, 0.0}, {0.116843, 0.0, 0.0, 0.239547, -0.0, 0.0}, {0.145558, 0.0, 0.0, 0.385105, -0.0, 0.0}, {0.105742, -0.0, 0.0, 0.490847, -0.0, 0.0}, {0.109319, -0.0, 0.0, 0.600166, -1e-06, 0.0}, {0.110341, 0.0, 0.0, 0.710507, -1e-06, 0.0}, {0.110155, -0.0, 0.0, 0.820661, -1e-06, 0.0}, {0.109648, -0.0, 0.0, 0.930309, -1e-06, 0.0}, {0.109344, 0.0, 0.0, 1.039654, -1e-06, 0.0}, {0.108022, -0.0, 0.0, 1.147676, -1e-06, 0.0}, {0.107572, -0.0, 0.0, 1.255247, -1e-06, 0.0}, {0.106294, -0.0, 0.0, 1.361541, -1e-06, 0.0}, {0.104794, 0.0, 0.0, 1.466335, -1e-06, 0.0}, {0.104254, 0.0, 0.0, 1.570589, -1e-06, 0.0}, {0.103862, -0.0, 0.0, 1.674452, -1e-06, 0.0}, {0.103324, 0.000359, 0.034374, 1.777776, 0.000358, 0.034374}, {0.103582, 0.001427, 0.055112, 1.881248, 0.005344, 0.089486}, {0.10198, 0.001383, 0.05426, 1.982696, 0.015836, 0.143746}, {0.101563, 0.001372, 0.049716, 2.083015, 0.031743, 0.193461}, {0.101152, 0.000859, 0.017022, 2.182115, 0.052033, 0.210483}, {0.101889, -0.0, 0.0, 2.281756, 0.073321, 0.210483}, {0.102311, 0.0, 0.0, 2.381809, 0.094697, 0.210483}, {0.102274, -0.0, 0.0, 2.481825, 0.116065, 0.210483}, {0.101346, -0.0, 0.0, 2.580934, 0.13724, 0.210483}, {0.101424, -0.0, 0.002713, 2.68012, 0.15843, 0.213196}, {0.100923, 0.000205, 0.008134, 2.778714, 0.179985, 0.22133}, {0.101022, 0.001126, 0.049173, 2.877024, 0.203261, 0.270503}, {0.100491, 0.001343, 0.053467, 2.973502, 0.231408, 0.32397}, {0.100202, 0.001335, 0.053313, 3.068066, 0.264572, 0.377283}, {0.148453, 0.003911, 0.079017, 3.204637, 0.322897, 0.4563}, {0.148245, 0.0039, 0.078907, 3.335997, 0.391719, 0.535207}, {0.148643, 0.003921, 0.079118, 3.461854, 0.470903, 0.614325}, {0.149905, 0.003988, 0.079791, 3.582053, 0.560568, 0.694116}, {0.100082, 0.001332, 0.053249, 3.658125, 0.625615, 0.747365}, {0.149637, 0.003974, 0.079648, 3.76518, 0.730239, 0.827013}, {0.100451, 0.001342, 0.053446, 3.832205, 0.805071, 0.880459}, {0.149282, 0.003955, 0.079459, 3.924218, 0.92269, 0.959918}, {0.149916, 0.003988, 0.079797, 4.006941, 1.047781, 1.039714}, {0.149241, 0.003952, 0.079437, 4.079119, 1.178466, 1.119151}, {0.143074, 0.002466, 0.026347, 4.139345, 1.30827, 1.145498}, {0.11078, -0.0, 0.0, 4.185052, 1.409182, 1.145498}, {-0.103665, 0.00406, -0.072331, 4.138583, 1.316426, 1.073167}, {-0.12574, 0.002799, -0.066916, 4.076102, 1.207272, 1.006251}, {-0.144288, 0.003693, -0.076797, 3.995783, 1.087349, 0.929454}, {-0.102553, 0.001399, -0.054564, 3.933308, 1.006011, 0.874889}, {-0.104753, 0.00146, -0.055736, 3.865032, 0.926552, 0.819154}, {-0.105221, 0.001473, -0.055984, 3.792107, 0.850686, 0.763169}, {-0.104938, 0.001465, -0.055834, 3.715262, 0.77921, 0.707335}, {-0.105268, 0.001474, -0.05601, 3.63429, 0.711926, 0.651326}, {-0.104742, 0.001459, -0.05573, 3.550106, 0.649588, 0.595596}, {-0.104102, 0.001442, -0.055389, 3.46312, 0.59238, 0.540207}, {-0.103763, 0.001432, -0.055208, 3.373397, 0.540242, 0.484998}, {-0.102838, 0.001407, -0.054716, 3.281763, 0.493543, 0.430282}, {-0.102016, 0.001384, -0.054279, 3.188469, 0.452247, 0.376004}, {-0.102526, 0.001398, -0.05455, 3.092591, 0.4159, 0.321453}, {-0.102675, 0.001402, -0.05463, 2.994733, 0.38479, 0.266824}, {-0.102758, 0.001405, -0.054673, 2.895241, 0.359051, 0.212151}, {-0.103038, 0.001412, -0.054822, 2.794216, 0.338736, 0.157328}, {-0.102509, 0.001398, -0.054541, 2.692754, 0.324056, 0.102787}, {-0.101959, 0.001383, -0.054248, 2.591192, 0.31497, 0.048539}, {-0.101726, 0.001377, -0.054124, 2.489519, 0.311409, -0.005585}, {-0.101655, 0.001375, -0.054086, 2.387873, 0.313351, -0.059672}, {-0.101776, 0.001378, -0.027188, 2.286361, 0.320796, -0.08686}, {-0.101215, 0.0, 0.0, 2.185528, 0.329577, -0.08686}, {-0.100775, -0.0, 0.0, 2.085132, 0.338319, -0.08686}, {-0.100865, 0.0, 0.002445, 1.984648, 0.347069, -0.084415}, {-0.100916, -0.001354, 0.053693, 1.883977, 0.354228, -0.030722}, {-0.101219, -0.001363, 0.02696, 1.782764, 0.355975, -0.003762}, {-0.101651, 0.0, 0.0, 1.681113, 0.356357, -0.003762}, {-0.100768, 0.0, 0.0, 1.580346, 0.356737, -0.003762}, {-0.100682, -0.0, 0.0, 1.479665, 0.357115, -0.003762}, {-0.100659, -0.0, 0.0, 1.379006, 0.357494, -0.003762}, {-0.100976, -0.0, 0.026824, 1.278031, 0.357873, 0.023063}, {-0.101273, -0.001364, 0.053883, 1.176816, 0.354174, 0.076946}, {-0.102802, -0.001406, 0.027264, 1.074427, 0.34487, 0.10421}, {-0.100751, 0.0, 0.0, 0.974222, 0.33439, 0.10421}, {-0.145003, 0.0, 0.0, 0.830006, 0.319306, 0.10421}, {-0.14566, -0.0, 0.0, 0.685136, 0.304154, 0.10421}, {-0.144384, -0.0, 0.0, 0.541536, 0.289135, 0.10421}, {-0.147643, 0.0, 0.0, 0.394694, 0.273777, 0.10421}, {-0.144931, 0.0, 0.0, 0.250549, 0.258701, 0.10421}, {-0.114633, 0.0, 0.0, 0.136537, 0.246777, 0.10421}, {0.116465, 0.004467, 0.076762, 0.251906, 0.263335, 0.180973}, {0.127924, 0.002899, 0.068079, 0.377219, 0.289211, 0.249052}, {0.144124, 0.003686, 0.07671, 0.515988, 0.328308, 0.325762}, {0.1506, 0.004025, 0.080161, 0.65738, 0.380318, 0.405924}, {0.102292, 0.001392, 0.054426, 0.75081, 0.421989, 0.460349}, {0.102049, 0.001385, 0.054296, 0.841621, 0.468567, 0.514646}, {0.102717, 0.001403, 0.054652, 0.930342, 0.520348, 0.569298}, {0.102594, 0.0014, 0.054586, 1.016, 0.57683, 0.623884}, {0.10204, -0.0, -0.003829, 1.098817, 0.636441, 0.620054}, {0.101778, -0.000222, -0.008749, 1.181778, 0.695401, 0.611305}, {0.102342, -0.000225, -0.008797, 1.265715, 0.753955, 0.602508}, {0.101663, -0.000222, -0.008739, 1.349602, 0.811385, 0.593769}};

vector<vector<float>> landmarks = {{0, 0, -0.388682, 1.768247}, {1, 0, -0.410915, 1.664806}, {1, 1, 0.857151, 2.596483}, {2, 0, -0.44935, 1.512664}, {2, 1, 0.916222, 2.497096}, {3, 0, -0.472363, 1.442588}, {3, 1, 0.947698, 2.444462}, {4, 0, -0.505131, 1.333681}, {4, 1, 0.98845, 2.372716}, {5, 0, -0.532782, 1.255833}, {5, 2, 0.263433, 2.681665}, {5, 1, 1.019114, 2.342117}, {6, 0, -0.57612, 1.15719}, {6, 2, 0.279098, 2.585275}, {6, 1, 1.065973, 2.276788}, {7, 0, -0.67222, 0.997055}, {7, 2, 0.306158, 2.393964}, {7, 1, 1.145344, 2.210665}, {8, 0, -0.706321, 0.956435}, {8, 2, 0.315812, 2.329545}, {8, 1, 1.171593, 2.191255}, {9, 0, -0.796615, 0.856949}, {9, 2, 0.339135, 2.204215}, {9, 1, 1.233995, 2.15851}, {10, 0, -0.882549, 0.78345}, {10, 2, 0.357495, 2.11174}, {10, 1, 1.280292, 2.12093}, {11, 0, -1.022095, 0.700727}, {11, 2, 0.385379, 1.989023}, {11, 1, 1.343052, 2.081245}, {12, 0, -1.116363, 0.66235}, {12, 2, 0.401023, 1.90738}, {12, 1, 1.380923, 2.07399}, {13, 0, -1.183218, 0.631442}, {13, 2, 0.412161, 1.854765}, {13, 1, 1.405939, 2.064777}, {14, 0, -1.411628, 0.596814}, {14, 2, 0.455326, 1.7131}, {14, 1, 1.484257, 2.029122}, {15, 0, -1.535513, 0.58844}, {15, 2, 0.477926, 1.644606}, {15, 1, 1.522394, 2.036554}, {16, 0, -1.707748, 0.589207}, {16, 2, 0.508972, 1.553808}, {16, 1, 1.573584, 2.043506}, {17, 0, -1.834999, 0.586959}, {17, 2, 0.528456, 1.500137}, {17, 1, 1.60168, 2.063413}, {18, 3, -0.291074, 2.710819}, {18, 2, 0.521473, 1.357533}, {18, 1, 1.610503, 2.073766}, {19, 3, -0.337213, 2.645684}, {19, 2, 0.511948, 1.284148}, {19, 1, 1.6111, 2.075085}, {20, 3, -0.399804, 2.548607}, {20, 2, 0.501531, 1.203073}, {20, 1, 1.609781, 2.073641}, {21, 3, -0.45659, 2.423937}, {21, 2, 0.518154, 1.094125}, {21, 1, 1.635767, 2.078719}, {22, 3, -0.492323, 2.306078}, {22, 2, 0.569092, 0.98413}, {22, 1, 1.687273, 2.080167}, {23, 3, -0.520224, 2.23531}, {23, 2, 0.626283, 0.893794}, {23, 1, 1.725722, 2.109823}, {24, 3, -0.534109, 2.181693}, {24, 2, 0.656401, 0.859879}, {24, 1, 1.74844, 2.107747}, {25, 3, -0.553513, 2.119221}, {25, 2, 0.71009, 0.808465}, {25, 1, 1.779747, 2.123083}, {26, 3, -0.598536, 1.996789}, {26, 2, 0.840391, 0.708429}, {26, 1, 1.839178, 2.162343}, {27, 3, -0.622853, 1.922897}, {27, 4, 0.702987, 2.636216}, {27, 2, 0.917154, 0.659122}, {27, 1, 1.865662, 2.186805}, {28, 3, -0.683245, 1.841344}, {28, 4, 0.696798, 2.570942}, {28, 2, 1.010827, 0.6045}, {28, 1, 1.872366, 2.233073}, {29, 3, -0.792055, 1.732748}, {29, 4, 0.666831, 2.457801}, {29, 2, 1.131759, 0.547912}, {29, 1, 1.862175, 2.268872}, {30, 3, -1.006861, 1.599905}, {30, 4, 0.608461, 2.293736}, {30, 2, 1.414354, 0.48284}, {31, 3, -1.112344, 1.547183}, {31, 4, 0.580098, 2.206032}, {31, 2, 1.555207, 0.477518}, {32, 3, -1.306849, 1.476667}, {32, 4, 0.534457, 2.054361}, {32, 1, 1.812685, 2.387282}, {32, 2, 1.800691, 0.495194}, {33, 3, -1.394185, 1.466459}, {33, 4, 0.513693, 1.987231}, {33, 1, 1.805503, 2.415908}, {33, 2, 1.904956, 0.519974}, {34, 3, -1.604402, 1.452775}, {34, 4, 0.465777, 1.824697}, {34, 1, 1.781457, 2.462043}, {35, 3, -1.725166, 1.464235}, {35, 4, 0.435052, 1.71869}, {36, 3, -1.87141, 1.484581}, {36, 4, 0.400721, 1.603794}, {37, 3, -2.038924, 1.550082}, {37, 4, 0.357847, 1.476492}, {38, 4, 0.313642, 1.337083}, {39, 4, 0.247925, 1.146734}, {40, 4, 0.224142, 1.0052}, {41, 4, 0.228858, 1.106426}, {42, 4, 0.263472, 1.232172}, {43, 4, 0.339917, 1.429387}, {44, 3, -2.102072, 1.523127}, {44, 4, 0.361159, 1.482958}, {45, 3, -2.019793, 1.47151}, {45, 4, 0.389271, 1.557123}, {46, 3, -1.808939, 1.405198}, {46, 4, 0.452819, 1.718563}, {47, 3, -1.714919, 1.370823}, {47, 4, 0.480824, 1.802598}, {47, 2, 1.99772, 0.673996}, {48, 3, -1.587849, 1.359088}, {48, 4, 0.512793, 1.898592}, {48, 2, 1.976144, 0.656284}, {49, 3, -1.490116, 1.351083}, {49, 4, 0.538734, 1.976624}, {49, 2, 1.906815, 0.631899}, {50, 3, -1.360782, 1.364922}, {50, 4, 0.571028, 2.070089}, {50, 2, 1.81304, 0.613645}, {51, 3, -1.232034, 1.377502}, {51, 4, 0.604791, 2.167315}, {51, 2, 1.710569, 0.600156}, {52, 3, -1.138506, 1.406572}, {52, 4, 0.629417, 2.233841}, {52, 2, 1.632438, 0.606621}, {53, 3, -1.017239, 1.450204}, {53, 4, 0.664415, 2.309073}, {53, 2, 1.53121, 0.61562}, {54, 3, -0.87731, 1.512258}, {54, 4, 0.703533, 2.420927}, {54, 2, 1.411029, 0.640022}, {54, 1, 1.86263, 2.457797}, {55, 3, -0.746507, 1.58297}, {55, 4, 0.738271, 2.516728}, {55, 2, 1.299877, 0.676536}, {55, 1, 1.877986, 2.433588}, {56, 3, -0.697863, 1.629755}, {56, 4, 0.753496, 2.567552}, {56, 2, 1.260398, 0.69492}, {56, 1, 1.88415, 2.417617}, {57, 3, -0.579991, 1.700393}, {57, 4, 0.790559, 2.660399}, {57, 2, 1.17856, 0.74468}, {57, 1, 1.899912, 2.382846}, {58, 3, -0.451563, 1.834582}, {58, 2, 1.105775, 0.816746}, {58, 1, 1.923303, 2.359931}, {59, 3, -0.407712, 1.880527}, {59, 2, 1.087141, 0.844781}, {59, 1, 1.930092, 2.345664}, {60, 3, -0.350131, 1.956934}, {60, 2, 1.056411, 0.885818}, {60, 1, 1.93891, 2.323727}, {61, 3, -0.275069, 2.039544}, {61, 2, 1.028427, 0.949229}, {61, 1, 1.953743, 2.286599}, {62, 3, -0.15837, 2.213763}, {62, 2, 0.98745, 1.047055}, {62, 1, 1.970885, 2.241864}, {63, 3, -0.112106, 2.288466}, {63, 2, 0.975961, 1.088239}, {63, 1, 1.980251, 2.203762}, {64, 3, -0.053043, 2.368831}, {64, 2, 0.963329, 1.158024}, {64, 1, 1.986376, 2.191629}, {65, 3, -0.033349, 2.450622}, {65, 2, 0.931441, 1.203555}, {65, 1, 1.967483, 2.171828}, {66, 3, -0.034559, 2.547092}, {66, 2, 0.869352, 1.270492}, {66, 1, 1.924641, 2.129566}, {67, 0, -1.990039, 0.651556}, {67, 3, -0.029866, 2.692595}, {67, 2, 0.804465, 1.34769}, {67, 1, 1.876293, 2.095836}, {68, 0, -1.862573, 0.620725}, {68, 2, 0.762354, 1.405446}, {68, 1, 1.833936, 2.07836}, {69, 0, -1.745967, 0.61518}, {69, 2, 0.683228, 1.469252}, {69, 1, 1.757592, 2.042312}, {70, 0, -1.601622, 0.612195}, {70, 2, 0.623229, 1.543453}, {70, 1, 1.698813, 2.011073}, {71, 0, -1.48778, 0.620072}, {71, 2, 0.592326, 1.590543}, {71, 1, 1.662419, 1.993224}, {72, 0, -1.275812, 0.65149}, {72, 2, 0.535591, 1.715745}, {72, 1, 1.578005, 1.982192}, {73, 0, -1.176717, 0.683207}, {73, 2, 0.509785, 1.793796}, {73, 1, 1.535525, 1.977201}, {74, 0, -1.042688, 0.733617}, {74, 2, 0.461969, 1.895952}, {74, 1, 1.460997, 1.988418}, {75, 0, -1.000309, 0.770983}, {75, 2, 0.43613, 1.95572}, {75, 1, 1.422742, 1.990756}, {76, 0, -0.945397, 0.864881}, {76, 2, 0.323352, 2.091496}, {76, 1, 1.273526, 2.018527}, {77, 0, -0.83724, 0.981542}, {77, 2, 0.286062, 2.233153}, {77, 1, 1.187956, 2.053319}, {78, 0, -0.763736, 1.06136}, {78, 2, 0.26517, 2.343767}, {78, 1, 1.12945, 2.103586}, {79, 0, -0.668376, 1.24383}, {79, 2, 0.223583, 2.558479}, {79, 1, 1.024012, 2.204738}, {80, 0, -0.637324, 1.289573}, {80, 2, 0.21415, 2.626914}, {80, 1, 0.994914, 2.224738}, {81, 0, -0.571671, 1.448924}, {81, 1, 0.916914, 2.332323}, {82, 0, -0.598836, 1.393061}, {82, 1, 0.930928, 2.302329}, {83, 0, -0.713768, 1.283193}, {83, 2, 0.138318, 2.621813}, {83, 1, 0.9215, 2.229268}, {84, 0, -0.895564, 1.159204}, {84, 2, 0.065679, 2.428659}, {84, 1, 0.904228, 2.129171}, {85, 0, -1.081302, 1.057767}, {85, 2, -0.006463, 2.292913}, {85, 1, 0.88878, 2.038549}, {86, 0, -1.2217, 1.013464}, {86, 2, -0.061116, 2.178951}, {86, 1, 0.878191, 1.953234}, {87, 0, -1.373244, 0.986634}, {87, 2, -0.11891, 2.062163}, {87, 1, 0.867553, 1.881691}, {88, 0, -1.487099, 0.975263}, {88, 2, -0.162601, 1.991611}, {88, 1, 0.859033, 1.824487}, {89, 0, -1.683264, 0.982029}, {89, 2, -0.242421, 1.853185}, {89, 1, 0.846676, 1.732483}, {90, 0, -1.874872, 1.008274}, {90, 2, -0.327451, 1.717929}, {90, 1, 0.834613, 1.648527}, {91, 0, -2.012402, 1.032577}, {91, 2, -0.39922, 1.617672}, {91, 1, 0.831141, 1.572221}, {92, 0, -2.13986, 1.120134}, {92, 2, -0.446057, 1.546014}, {92, 1, 0.866124, 1.501254}, {93, 2, -0.471866, 1.469663}, {93, 1, 0.904855, 1.459511}};

vector<vector<float>> landmark_locs = {{1.59206,-0.653036},{1.77281,1.96801},{3.09866,0.655031},{4.5438,-0.745512},{4.42333,2.10601}};

size_t num_landmarks = 4;


int main() {
    // Create an empty nonlinear factor graph
    NonlinearFactorGraph graph;

    vector<Symbol> xs;
    vector<Symbol> ls;
    for (size_t i = 0; i <= num_landmarks; i++) {
        ls.push_back(Symbol('l', i+1));
    }
    for (size_t i = 0; i < odometries.size() + 1; i++) {
        xs.push_back(Symbol('x', i+1));
    }

    Pose2 priorMean(0.0, 0.0, 0.0);
    noiseModel::Diagonal::shared_ptr priorNoise =
    noiseModel::Diagonal::Sigmas(Vector3(0.3, 0.3, 0.1));
    graph.add(PriorFactor<Pose2>(xs[0], priorMean, priorNoise));

    // Add odometry factors
    noiseModel::Diagonal::shared_ptr odometryNoise =
    noiseModel::Diagonal::Sigmas(Vector3(0.2, 0.2, 0.1));
    for (size_t i = 0; i < odometries.size(); i++) {
        graph.add(gtsam::BetweenFactor<Pose2>(xs[i], xs[i+1], Pose2(odometries[i][0], odometries[i][1], odometries[i][2]), odometryNoise));
    }

    // freeze landmark factors because this is localization
    for (size_t i = 0; i <= num_landmarks; i++) {
        graph.add(gtsam::NonlinearEquality<Point2>(ls[i], Point2(landmark_locs[i][0], landmark_locs[i][1])));
    }
    
    // add landmark factors
    noiseModel::Diagonal::shared_ptr brNoise = noiseModel::Diagonal::Sigmas(Vector2(0.1, 0.2));
    for (size_t i = 0; i < landmarks.size(); i++) {
        graph.add(gtsam::BearingRangeFactor<Pose2, Point2>(xs[round(landmarks[i][0])], ls[round(landmarks[i][1])], Rot2::fromAngle(landmarks[i][2]), landmarks[i][3], brNoise));
    } 

    Values initial_estimates;

    vector<Pose2> initial_pos_estimates;
    Pose2 pos(0, 0, 0);
    initial_pos_estimates.push_back(pos);
    for (size_t i = 0; i < odometries.size(); i++) {
        initial_pos_estimates.push_back(Pose2(odometries[i][3], odometries[i][4], odometries[i][5]));
    }  

    // cout << "before" << endl;

    unordered_set<int> visited;
    for (size_t i = 0; i < landmarks.size(); i++) {
        int pos_idx = round(landmarks[i][0]);
        int ld_idx = round(landmarks[i][1]);
        cout << "l" << ld_idx + 1 << " x" << pos_idx + 1 << endl;
    }

    for (size_t i = 0; i <= num_landmarks; i++) {
        initial_estimates.insert(ls[i], Point2(landmark_locs[i][0], landmark_locs[i][1]));
    }

    // cout << "after" << endl;

    for (size_t i = 0; i < initial_pos_estimates.size(); i++) {
        initial_estimates.insert(xs[i], initial_pos_estimates[i]);
    }

    graph.print();

    LevenbergMarquardtOptimizer optimzer(graph, initial_estimates);
    Values result = optimzer.optimize();
    result.print("\nFinal result\n");

}